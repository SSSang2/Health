#!/usr/bin/env node

var amqp = require('amqplib');
var PACKAGE = '5041434b54595045'
var noble = null;//require('./index');
var kocom = 'Multi';
var isMsg = 0;
var isRsp = 0;

var isConn = 0;

var Msg = '';
var RspMsg = '';
var msg_type ='';

var index =22;
var num =0;
var dev_type = '';
var head = '';
var cmd_type = '';
var isHead = 0;
var noDet =1;
var bMsg = 0;
var map = new Map();
var bufferMap = new Map();
var scanMap = new Map();
var commandQue = [];
var isScanning = 0;
console.log('rabbitMq');
amqp.connect('amqp://localhost').then(function(conn) {
process.once('SIGINT', function() { conn.close(); });
return conn.createChannel().then(function(ch) {
        var ok = ch.assertExchange('BLE', 'fanout', {durable: false});
        var ok2 = ch.assertExchange('BLE2', 'fanout', {durable: false});
        var ex = 'BLE';
        var ex2 = 'BLE2';
        ok = ok.then(function() {
            return ch.assertQueue('', {exclusive: true});
            });
        ok = ok.then(function(qok) {
            return ch.bindQueue(qok.queue, 'BLE', '').then(function() {
                return qok.queue;
                });
            });


        return ok.then(function() {

        ok = ok.then(function(queue) {
            return ch.consume(queue, logMessage, {noAck: true});
            });
            console.log(' [*] Waiting for logs. To exit press CTRL+C');

			//////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Noble code from here
			//////////////////////////////////////////////////////////////////////////////////////////////////////////

            console.log('noble');
			noble = require('./index');

			function stopscan() {
              isScanning = 0;
              console.log('------------------------------------stop');
			  noble.stopScanning(function() {
			    }); 
			}
            function startscan(){
                if(isScanning ==0)
				noble.startScanning();
            }

			noble.on('stateChange', function(state) {

				if (state == 'poweredOn' && isScanning ==0) {
                
				setInterval(function(){
                    console.log('setInerval function, isScanning : '+ isScanning);
                        if(isScanning == 0){
                            isScanning = 1;
			    		    noble.startScanning();
						    setTimeout(stopscan, 3000);
                        }
						}, 3000);
				} 
				else {
                console.log('-------------stateChange stop-----');
				noble.stopScanning();
				}
			});

            noble.on('scanStart', function() {
                console.log('on -> scanStart');

                });

            noble.on('scanStop', function() {
                isScanning = 0;
                console.log('on -> scanStop');
                });


            noble.on('discover', function(peripheral) {
                      console.log('on -> discover: ' + peripheral.advertisement.localName);
                    var n = -1;
                    if(peripheral.advertisement.localName != null){
                    	if(peripheral.advertisement.localName.indexOf(kocom)> -1){
                            var temp = peripheral.advertisement.localName;
                            if(!map.has(temp)){
					            map.set(temp,'0');
                         /*   else
                                peripheral.disconnect();
                        */
							isConn =0;
							console.log('Name : ' +temp);
                   	 		peripheral.connect();
                            }
						}
					}
                    peripheral.on('connect', function() {

                        console.log('on -> connect');
                       	//this.updateRssi();
                        this.discoverServices();
                       });

                    peripheral.on('disconnect', function() {
                        console.log('on -> disconnect');
                        var temp = peripheral.advertisement.localName;
                        if(map.has(temp))
                            map.delete(temp);
				        //noble.startScanning();
                        });

                    peripheral.on('rssiUpdate', function(rssi) {
                            this.discoverServices();
                            });

                    peripheral.on('servicesDiscover', function(services) {
                            var serviceIndex = 3;
                            services[serviceIndex].on('includedServicesDiscover', function(includedServiceUuids) {
                                this.discoverCharacteristics();
                                });

                            services[serviceIndex].on('characteristicsDiscover', function(characteristics) {
                                var characteristicIndex = 0;

                                characteristics[characteristicIndex].on('read', function(data, isNotification) {
								console.log('#value = ' + map.get(peripheral.advertisement.localName)); 

                                // Initially Sensor detected
								if(map.get(peripheral.advertisement.localName) == '0'){
									console.log('\n\n');
									console.log('=======================================================');
									console.log('-------------------------------------------------------');
									map.set(peripheral.advertisement.localName, '1');
									console.log('#'+peripheral.advertisement.localName + ' saved in map , ' + map.get(peripheral.advertisement.localName));

                                    var p = new Buffer("5041434B545950455200C1", 'hex');
                                    characteristics[characteristicIndex].write(p);
									console.log('#Sent command : ' + p.toString('hex'));
                                    characteristics[characteristicIndex].read();
								}
								else if(map.get(peripheral.advertisement.localName)== '1'){
									var p = new Buffer(data.toString('hex'));
									console.log('>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'  + p);
									if(data.toString() != "NO DETECT") {
										if(data.toString() == "NOT READY"){
											//map.delete(peripheral.advertisement.localName);		
											console.log('# NOT READY Message');
											map.set(peripheral.advertisement.localName, '0');		
                                    		characteristics[characteristicIndex].read();
											
										}
										else if(p.toString().substring(20,22) == "c2"){	
											var tmp = peripheral.advertisement.localName;
											var pp = new Buffer(p.toString().substring(16,18));
											map.set(tmp, pp);
											console.log('# set type : ' + map.get(tmp));
											var t = new Buffer("5041434B54595045" + map.get(tmp) + "00A1", 'hex');
                                    		characteristics[characteristicIndex].write(t);
											console.log('# Sent command : ' + t.toString('hex'));
											console.log('-------------------------------------------------------');
											console.log('=======================================================');
                                            if(!scanMap.has(tmp)){
                                                scanMap.set(tmp,'1');
                                                isScanning =0;
			    		                        //noble.startScanning();
                                            }
                                                stopscan();
											console.log('\n\n');
										}
									}
                                    else{
                                        /*
                                        var p = new Buffer("5041434B545950455200C1", 'hex');
                                        characteristics[characteristicIndex].write(p);
                                        console.log('#Sent command : ' + p.toString('hex'));
                                        characteristics[characteristicIndex].read();
                                        */
                                    }
                                     //peripheral.disconnect();
                                        
								}
								else{

                                    // Usually 'd1' message
                                    if(isNotification){
										var temp = peripheral.advertisement.localName;
                                        console.log('data : ' + data.toString('hex') + ', key : ' + temp + ', type : ' + map.get(temp));
                                        var p = new Buffer(data.toString('hex'));
                                        if( data.toString().indexOf("NO DETECT") ==  -1){
											console.log('publish : ' + p.toString() + ', index : ' + data.toString('hex').indexOf(PACKAGE));
											if(data.toString('hex').indexOf(PACKAGE) >-1)
                                            ch.publish(ex2, '', p);
                                        }
										else
                                         noDet =1;

										 console.log('\n\n\n\n');

                                    }
                                    // After write something to sensor
                                    else{
                                        isRsp=1;
										var p = new Buffer(data.toString('hex'));
										if(p.toString().substring(20,22) == "c2"){
												var tmp = peripheral.advertisement.localName;
												var pp = new Buffer(p.toString().substring(16,18));
												map.set(tmp, pp);
												console.log('# set type : ' + map.get(tmp));
												var t = new Buffer("5041434B54595045" + map.get(tmp) + "00A1", 'hex');
												characteristics[characteristicIndex].write(t);
												console.log('# Sent command : ' + t.toString('hex'));
												console.log('-------------------------------------------------------');
												console.log('=======================================================');
												console.log('\n\n');
										}
										else{
												var index = peripheral.advertisement.localName;
                                                
												if(bufferMap.has(map.get(index)))
														RspMsg = bufferMap.get(map.get(index));
												else
														RspMsg = '';
                                               

                                                if(data.toString() == "NO DETECT" && RspMsg != null){
                                                    var strTemp = new Buffer(""+RspMsg);
                                                    var lastStringIndex = strTemp.toString().lastIndexOf(PACKAGE); 

                                                    if(lastStringIndex >0){
                                                        RspMsg = strTemp.toString();
                                                        RspMsg = RspMsg.substring(lastStringIndex, RspMsg.toString().length);
                                                    }
                                                    else
                                                        RspMsg = strTemp;

                                                    if(RspMsg.toString().length > 88)
																RspMsg = RspMsg.substring(0,86);

                                                        console.log('# RspMsg : ' + RspMsg);
														console.log('# Sent ' + p.toString());
														console.log('# Sent ' + RspMsg);
														console.log('publish : ' + RspMsg + ', index : ' + data.toString('hex').indexOf(PACKAGE));
                                                        var pubBuffer = new Buffer("" + RspMsg);
														if(pubBuffer.toString().indexOf(PACKAGE) >-1){
																ch.publish(ex2, '', pubBuffer);
														}
														bMsg =0;
														RspMsg = '';
														bufferMap.set(map.get(index),RspMsg);
														if(num>0)
																isMsg = 1;
														isRsp =0;
														noDet = 1;
														isConn =1;
												}
												else{
														var p = new Buffer(data.toString('hex'));
														if( p.toString().indexOf("00000")==-1 && p.toString().substring(20,22) != 'd1'){
																if(data.toString() != "NO DETECT" ){
                                                                        console.log('#Read Data : ' + p);
																		RspMsg += p.toString();
																		bufferMap.set(map.get(index), RspMsg);
                                                                        console.log('#Read Plus Data : ' + bufferMap.get(map.get(index)));
																}
                                                        }
                                                        else{
                                                            console.log('#Read Data Error : ' + p.toString());
                                                        }
														characteristics[characteristicIndex].read();
												}     
										}
                                    }
                                    if(isMsg)
                                    {
            								var type = Msg.substring(16,18); 
											var index = peripheral.advertisement.localName;
											console.log('&&&&&&&&&&&&&&&&&&&&&&&');
											console.log('&&& Send type : ' + type);
											console.log('&&& sensor type : ' + map.get(index));
											console.log('&&&&&&&&&&&&&&&&&&&&&&&');
											if(map.get(index) == type){
													var p = new Buffer(Msg, "hex");
													console.log('Message to Send : ' + p );
													characteristics[characteristicIndex].write(p);
													isHead =1;
													isRsp=1;
													isMsg =0;
													RspMsg = '';
													characteristics[characteristicIndex].read();
											}
                                   }
								}
                                    });

                                characteristics[characteristicIndex].on('write', function() {
                                    console.log('on -> characteristic write ');
                                    characteristics[characteristicIndex].read();

                                    //peripheral.disconnect();
                                    });

                                characteristics[characteristicIndex].on('broadcast', function(state) {
                                    console.log('on -> characteristic broadcast ' + state);

                                    //peripheral.disconnect();
                                    });

                                characteristics[characteristicIndex].on('notify', function(state) {
                                        console.log('on -> characteristic notify ' + state);

                                        //peripheral.disconnect();
                                        });

                                characteristics[characteristicIndex].read();
                                //characteristics[characteristicIndex].notify(true);
                            });


                            services[serviceIndex].discoverIncludedServices();
                    });
            });

        function logMessage(msg) {
           if(bMsg == 0){
             console.log(" [x] '%s'", msg.content.toString());
             var msg_tmp = msg.content.toString();
             console.log(" Length : %d, type : %s", msg.content.length, msg_tmp.substring(20,22));
             if(msg.content.length >= 22)
             msg_type = msg_tmp.substring(20,22); 
             console.log('type : ' + msg_type);

             if(msg.content == 'isConn'){         // Need addtional option about ble connection
				isConn = 1;
		     }
            else if(msg_type == 'A1' || msg_type == 'B1' || msg_type == 'b1' || msg_type == 'a1'){
                    if(msg_type == 'b1' || msg_type == 'B1'){
                        bMsg = 1;
                    }
                    console.log(msg_type + 'msg');
                    isMsg = 1;
                    Msg = msg_tmp;
                    console.log('Sent ' + msg_tmp + 'to sensor');
                    index = 22;
                }
           }
        }
   });
});
}).then(null, console.warn);
